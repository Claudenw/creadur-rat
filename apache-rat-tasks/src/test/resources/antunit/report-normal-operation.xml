<?xml version='1.0'?>
<!--

 Licensed to the Apache Software Foundation (ASF) under one   *
 or more contributor license agreements.  See the NOTICE file *
 distributed with this work for additional information        *
 regarding copyright ownership.  The ASF licenses this file   *
 to you under the Apache License, Version 2.0 (the            *
 "License"); you may not use this file except in compliance   *
 with the License.  You may obtain a copy of the License at   *
                                                              *
   http://www.apache.org/licenses/LICENSE-2.0                 *
                                                              *
 Unless required by applicable law or agreed to in writing,   *
 software distributed under the License is distributed on an  *
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
 KIND, either express or implied.  See the License for the    *
 specific language governing permissions and limitations      *
 under the License.                                           *

SPDX-License-Identifier: Apache-2.0
-->

<project name='report-normal-operation'
    default="allTests"
    xmlns:au="antlib:org.apache.ant.antunit"
    xmlns:rat="antlib:org.apache.rat.anttasks">

  <property name="output.dir" location="../../../../target/testoutput"/>
  <property name="resource.dir" location="../../../../src/test/resources/antunit"/>
  <mkdir dir="${output.dir}/dest"/>
  <path id="all-classes-needed-for-tests">
    <pathelement location="${jar.name}" />
    <pathelement path="${test.classpath}" />
    <pathelement location="${output.dir}/dest" />
  </path>

  <taskdef uri="antlib:org.apache.ant.antunit" 
           resource="org/apache/ant/antunit/antlib.xml" 
           classpathref="all-classes-needed-for-tests"
           loaderref="testloader"/>

  <taskdef uri="antlib:org.apache.rat.anttasks"
           resource="org/apache/rat/anttasks/antlib.xml"
           classpathref="all-classes-needed-for-tests"
           loaderref="testloader"/>

  <target name="setUp">
    <pathconvert dirsep="/" property="file.name">
      <path>
        <pathelement location="${ant.file}"/>
      </path>
    </pathconvert>
    <property name="expectedOutput" value=" AL    ${file.name}"/>
    <property name="expectedOutputXML" value="&lt;resource name='${file.name}'"/>
    <property name="expectedOutputXML2" value="&lt;header-type name='AL   '"/>
    <echo>Java version: ${ant.java.version}</echo>
  </target>

  <target name="allTests">
    <au:antunit xmlns:au="antlib:org.apache.ant.antunit"
                failonerror="true" >
      <file file="${ant.file}"/>
      <au:plainlistener/>
      <propertyset>
        <propertyref name="test.classpath"/>
        <propertyref name="jar.name"/>
      </propertyset>
    </au:antunit>
  </target>

  <target name="tearDown">
    <delete file="${output.dir}/selftest.report" quiet="true"/>
  </target>
  
  <target name="testWithReportSentToAnt">
    <rat:report>
      <file file="${ant.file}"/>
    </rat:report>
    <au:assertLogContains text="${expectedOutput}"/>
  </target>

  <target name="testWithReportSentToFile" depends="fileReportTest">
    <rat:report reportFile="${report.file}">
      <file file="${ant.file}"/>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutput}"/>
    <au:assertFileExists file="${report.file}"/>
    <assertReportContains text="${expectedOutput}"/>
  </target>

  <target name="testXMLReportSentToFile" depends="fileReportTest">
    <rat:report reportFile="${report.file}.xml" format="xml">
      <file file="${ant.file}"/>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutputXML}"/>
    <au:assertLogDoesntContain text="${expectedOutputXML2}"/>
    <au:assertFileExists file="${report.file}.xml"/>
    <assertReportContains text="${expectedOutputXML}"
                          file="${report.file}.xml"/>
    <assertReportContains text="${expectedOutputXML2}"
                          file="${report.file}.xml"/>
  </target>

  <target name="testWithALUnknown">
    <rat:report useDefaultLicenses="false">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <copyright owner="exmpl"/>
      </rat:license>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutput}"/>
    <au:assertLogContains text="!????? ${file.name}"/>
  </target>

  <target name="testWithALUnknownSentToFile" depends="fileReportTest">
  <!-- create a non-matching license, ignore all defaults and submit the xml as the report -->
    <rat:report useDefaultLicenses="false" reportFile="${report.file}">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <copyright owner="exmpl"/>
      </rat:license>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutput}"/>
    <au:assertLogDoesntContain text="!????? ${file.name}"/>
    <assertReportContains text="!????? ${file.name}"/>
  </target>

  <target name="testCustomMatcher" depends="prepareCustomMatcher">
    <rat:report useDefaultLicenses="false">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="EXMPL"
          licenseFamilyName="Yet Another Software License (EXAMPLE) 1.0"
          notes="Interesting License">
        <exmpl/>
      </rat:license>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutput}"/>
    <au:assertLogContains text=" EXMPL ${file.name}"/>
  </target>

  <target name="testCustomLicenseSentToFile"
          depends="fileReportTest,prepareCustomMatcher">
    <rat:report reportFile="${report.file}">
      <file file="${ant.file}"/>
      <exmpl/>
    </rat:report>
    <au:assertLogDoesntContain text="${expectedOutput}"/>
    <au:assertLogDoesntContain text=" EXMPL ${file.name}"/>
    <assertReportContains text=" EXMPL ${file.name}"/>
  </target>

  <target name="testTextMatcherWithAbusedWhitespaceSentToFileNoMatch"
          depends="fileReportTest">
    <rat:report reportFile="${report.file}"
                useDefaultLicenses="false">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <!-- abusing XML attribute whitespace normalization to create
             a substring that is not contained inside the build file
             itself -->
        <rat:text text="exmpl
"/>
      </rat:license>
    </rat:report>
    <assertReportDoesntContain text="!YASL1 ${file.name}"/>
    <assertReportContains text=" YASL1 ${file.name}"/>
  </target>
  
  <target name="testAnyBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:any>
            	<rat:copyright start="2023" end="2024" owner="public domain" />
            	<rat:text>the text</rat:text>
            </rat:any>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testAllBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:all>
            	<rat:text text="the other text"/>
            	<rat:text>the text</rat:text>
            </rat:all>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testCopyrightBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${resource.dir}/index.apt"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:copyright start="2023" end="2024" owner="public domain" />
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testNotBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:not>
            <rat:copyright start="2023" end="2024" owner="public domain" />
            </rat:not>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testRegexAttributeBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:regex regex="regex\sregex"/>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testRegexNestedTextBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:regex>regex\sregex</rat:regex>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testSpdxAttributeBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:spdx name="Apache-2.0"/>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testSpdxNestedTextBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:spdx>Apache-2.0</rat:spdx>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testTextAttributeBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:text text="The text"/>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testTextNestedTextBuild">
      <rat:report useDefaultLicenses="false">
        <file file="${ant.file}"/>
        <rat:license
            licenseFamilyCategory="YASL1"
            licenseFamilyName="Yet Another Software License (YASL) 1.0"
            notes="Interesting License">
            <rat:text>The text</rat:text>
        </rat:license>
      </rat:report>
  </target>
  
  <target name="testLicenseNotApprovedSentToFile"
          depends="fileReportTest">
    <rat:report reportFile="${report.file}"
                useDefaultLicenses="false">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <rat:text>License Family Name: Yet Another Software License (YASL) 1.0</rat:text>
      </rat:license>
      <rat:removeApprovedLicense>YASL1</rat:removeApprovedLicense>
    </rat:report>
    <assertReportContains text="!YASL1 ${file.name}"/>
    <assertReportDoesntContain text=" YASL1 ${file.name}"/>
  </target>

  <target name="testLicenseApprovedSentToFile"
          depends="fileReportTest">
    <rat:report reportFile="${report.file}"
                useDefaultLicenses="false">
      <file file="${ant.file}"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <rat:text>License Family Name: Yet Another Software License (YASL) 1.0</rat:text>
      </rat:license>
    </rat:report>
    <assertReportContains text=" YASL1 ${file.name}"/>
    <assertReportDoesntContain text="!YASL1 ${file.name}"/>
  </target>

  <target name="testNoLicenseMatchSentToFile"
          depends="fileReportTest">
    <pathconvert dirsep="/" property="alt.file.name">
      <path>
        <pathelement location="report-bad-configurations.xml"/>
      </path>
    </pathconvert>
    <rat:report reportFile="${report.file}"
                useDefaultLicenses="false">
      <file file="report-bad-configurations.xml"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
<rat:text>This text shouldn't exist in report-bad-configuration.xml</rat:text>
      </rat:license>
    </rat:report>
    <assertReportDoesntContain text="!YASL1 ${alt.file.name}"/>
    <assertReportDoesntContain text=" YASL1 ${alt.file.name}"/>
  </target>

  <target name="testLicenseExpandsProperties"
          depends="fileReportTest">
    <pathconvert dirsep="/" property="alt.file.name">
      <path>
        <pathelement location="report-bad-configurations.xml"/>
      </path>
    </pathconvert>
    <property name="test.version" value="1.0"/>
    <rat:report reportFile="${report.file}"
                useDefaultLicenses="false">
      <file file="report-bad-configurations.xml"/>
      <rat:license
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        <rat:text>licenseFamilyName="Yet Another Software License (YASL) ${test.version}</rat:text>
      </rat:license>
    </rat:report>
    <assertReportContains text="!YASL1 ${alt.file.name}"/>
    <assertReportDoesntContain text=" YASL1 ${alt.file.name}"/>
  </target>

  <target name="fileReportTest" depends="setUp">
    <property name="report.file" location="${output.dir}/selftest.report"/>
    <au:assertFileDoesntExist file="${report.file}"/>
    <macrodef name="assertReportContains">
      <attribute name="text"/>
      <attribute name="file" default="${report.file}"/>
      <sequential>
        <loadfile srcFile="@{file}" property="report"/>
        <au:assertTrue message="expected report to contain '@{text}' but was '${report}'">
          <contains string="${report}" substring="@{text}"/>
        </au:assertTrue>
      </sequential>
    </macrodef>
    <macrodef name="assertReportDoesntContain">
      <attribute name="text"/>
      <attribute name="file" default="${report.file}"/>
      <sequential>
        <loadfile srcFile="@{file}" property="report"/>
        <au:assertFalse message="expected report to not contain '@{text}' but was '${report}'">
          <contains string="${report}" substring="@{text}"/>
        </au:assertFalse>
      </sequential>
    </macrodef>
  </target>

  <target name="prepareCustomMatcher">
<echo>output.dir is ${output.dir}</echo>
    <mkdir dir="${output.dir}/dest"/>
    <mkdir dir="${output.dir}/src/org/example"/>
    <echo file="${output.dir}/src/org/example/MyMatcher.java"><![CDATA[
package org.example;

import org.apache.rat.analysis.IHeaderMatcher;
import org.apache.rat.anttasks.License;

public class MyMatcher implements IHeaderMatcher, IHeaderMatcher.Builder {
    public MyMatcher() {
    }
    

    @Override
    public IHeaderMatcher build() {
        return this;
    }


    @Override
    public String getId() {
        return "MyCustomMatcher";
    }


    @Override
    public void reset() {
    }


    @Override
    public boolean matches(String line) {
        return true;
    }
}
]]></echo>
    
    <javac srcdir="${output.dir}/src" destdir="${output.dir}/dest"
           classpath="${test.classpath}" fork="true"/>
    <typedef name="exmpl" classname="org.example.MyMatcher"
             classpathref="all-classes-needed-for-tests"
             loaderref="testloader"/>
  </target>

</project>
