~~   Licensed to the Apache Software Foundation (ASF) under one or more
~~   contributor license agreements.  See the NOTICE file distributed with
~~   this work for additional information regarding copyright ownership.
~~   The ASF licenses this file to You under the Apache License, Version 2.0
~~   (the "License"); you may not use this file except in compliance with
~~   the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.

 -----------------------
 Custom License Matchers
 -----------------------

Custom License Matchers

  Rat comes with a set of predefined license matchers, that can be used
  on typical licenses. However, they will not always be sufficient.
  In such cases, you may configure a custom license matcher.

  The simplest way to create a license check is to create an XML file describing
  the new license and add it to the processing with the additionalLicenseFiles
  option.

  The second option is to define the custom license directly in the POM.
  Unlike earlier version (before 0.16) no custom implementations are required to define
  custom licenses.

  There is a file that defines all of the standard licenses: {{{https://github.com/apache/creadur-rat/blob/master/apache-rat-core/src/main/resources/org/apache/rat/default.xml}default.xml}}

------------------------------------------------------------------
  /**
   * Yet Another Software License, 1.0
   *
   * Lots of text, specifying the users rights, and whatever ...
   */
------------------------------------------------------------------

  A very easy way to search for such headers would be to scan
  for the string "Yet Another Software License, 1.0". And here's
  how you would do that in your POM:

------------------------------------------------------------------
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <version>${currentVersion}</version>
        <configuration>
          <licenses>
            <license>
              <family>YASL1</family>
              <notes></notes>
              <text>Yet Another Software License, 1.0</text>
            </license>
          </licenses>
          <families>
             <family>
               <id>YASL1</id>
               <name>Yet Another Software License</name>
             </family>
          </families>
        </configuration>
      </plugin>
      ...
    </plugins>
  </build>
------------------------------------------------------------------

  This is very similar to the XML format for defining the configuration.


Approved License Families

  By default all POM defined licenses are considered approved, this is a
  change from pre 0.16 versons.  If there are families that are defined in
  the pom but that should not be considered approved then a list of approved
  license families must be provided.

  To continue the example, to be explicit that the YASL1 license is approved
  add an approvedLicenses section listing the IDs for the approved licenses.

------------------------------------------------------------------
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <version>${currentVersion}</version>
        <configuration>
          <licenses>
            <license>
              <family>YASL1</family>
              <notes></notes>
              <text>Yet Another Software License, 1.0</text>
            </license>
          </licenses>
          <families>
             <family>
               <id>YASL1</id>
               <name>Yet Another Software License</name>
             </family>
          </families>
          <approvedLicenses>
            <id>YASL1</id>
          </approvedLicenses>
        </configuration>
      </plugin>
      ...
    </plugins>
  </build>
------------------------------------------------------------------

Overview of configuration options

  When defining custom licenses, remember the following architecture constraints:

  * Each license is associated with a family.  Multiple licenses can be associated with a family.

  * Each license may have a notes element.

  * Each license has one matcher.

* Matcher details

    <<all>> - A collection of matchers in which all enclosed matchers have to be true for the matcher to report true.

    <<any>> - A collection of matchers that will report true if any enclosed matcher is true.

    <<copyright>> - A matcher that matches Copyright text.
    This uses regular expressions and so should only be used when looking for copyrights with specific patterns that are not caught by a standard text matcher.
    This matcher will match <<<"(C)">>>, <<<"copyright">>>, or <<<"Â©">>>. (text is not case sensitive).
    It will also match things like <<<Copyright (c) joe 1995>>> as well as <<<Copyright (C) 1995 joe>>>.
    Copyright has 3 child elements:

      * <<start>> - the starting date of the copyright or the only date.

      * <<end>> - the ending date of the copyright.  Only valid if the starting date is provided.

      * <<owner>> - the copyright owner.

    <<not>> - A matcher that wraps one matcher and negates its value.  Not matchers require that the entire header be read before it can report true or false.  This may significantly slow processing.

    <<regex>> - A matcher that matches a regex string.

    <<spdx>> - A matcher that matches SPDX tags.  SPDX tags have the form: <<<SPDX-License-Identifier: short-name>>>, where short-name matches the regex pattern <<<"[A-Za-z0-9\.\-]+".>>>  spdx takes the short name as an argument.

  If you define families and do not define <<<approvedFamilies>>> in your pom all the families are assumed to be approved.

~~ https://maven.apache.org/doxia/references/apt-format.html
